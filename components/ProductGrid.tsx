"use client";
// marks this as a client Component for next.js app router
// this means it can use React hooks like useState and UserEffects


import React, { useEffect, useState } from "react";
// Importing React and two hooks for managing state and side effects

import ProductCard from "./ProductCard";
import { motion, AnimatePresence } from "framer-motion";

// Used for smooth animations when showing/hiding elements.

import { client } from "@/sanity/lib/client"; 
// Sanity client used to fetch data from your Sanity CMS.

import NoProductAvailable from "./NoProductAvailable"; 
// A component shown when no products are available.

import { productType } from "./data"; 
// A list of product types defined as constants in your app.

import { Loader2 } from "lucide-react"; 
// A spinner icon component to show loading state.


import { Product } from "@/sanity.types"; 
// The TypeScript type definition for a product (auto-generated by Sanity Typegen).

import HomeTopBar from "./HomeTopBar";
import Container from "./Container";

const ProductGrid = () => {
 // Holds the list of products fetched from Sanity
  const [products, setProducts] = useState<Product[]>([]);

  // Tracks whether data is currently loading
  const [loading, setLoading] = useState(false);

  // Stores the currently selected tab (product type)
  const [selectedTab, setSelectedTab] = useState(productType[0]?.title || "");

  // Query to fetch products by variant (type) from Sanity
  const query = `*[_type == "product" && variant == $variant] | order(name asc){
    ...,"categories": categories[]->title
  }`;

// parameters passed to the query convert tab title to lowercase
const params = {variant:selectedTab.toLowerCase()};
// Data fetching 

useEffect (() => {
  // Define the async function to fetch product data 
  const fetchData = async () => {
    setLoading(true); /// Start loading 

    try{
      // Fetch data from sanity using query and params
      const response = await client.fetch(query,params);
      setProducts(response);

    }
    catch(error){
      // Handle any errors
      console.error("Product fetching Error",error)
    }
    finally{
      // Stop loading whether success or error
      setLoading(false);
    }
  };

   // Call the fetch fuction whenever the selected tab changes
   fetchData();

},[selectedTab]);
  return (
    <Container>

        {/* Tabs Section - lets user pick a category (e.g., Men, Women) */}
      <HomeTopBar
        selectedTab={selectedTab}
        onTabSelect={setSelectedTab}
      />
      {/* If loading, show a spinner */}
      {loading ? (
        // ðŸ”¹ 1. Show loading spinner while fetching products
        <div className="flex flex-col items-center justify-center py-10 min-h-80 space-y-4 text-center bg-gray-100 rounded-lg w-full mt-10">
          <motion.div className="flex items-center space-x-2 text-blue-600">
            <Loader2 className="w-5 h-5 animate-spin" />
            <span>Product is loading...</span>
          </motion.div>
        </div>
      ): products?.length ? (
         <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2.5 mt-10">
          <>
            {products?.map((product) => (
              <AnimatePresence key={product?._id}>
                {/* âœ… AnimatePresence ensures animations work properly when items are added or removed */}
                <motion.div
                  layout
                  initial={{ opacity: 0.2 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                >
                  {/* âœ… Each product is rendered using the ProductCard component */}
                  <ProductCard key={product?._id} product={product} />
                </motion.div>
              </AnimatePresence>
            ))}
          </>
        </div>
      ): (
        // If no products found for selected tab
        <NoProductAvailable selectedTab={selectedTab} />
      ) }
        
    </Container>
  );
};

export default ProductGrid;
